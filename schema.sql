-- Enable Row Level Security (RLS)
ALTER TABLE IF EXISTS public.clients ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS public.motorcycles ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS public.inventory_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS public.expenses ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS public.services ENABLE ROW LEVEL SECURITY;
ALTER TABLE IF EXISTS public.service_products ENABLE ROW LEVEL SECURITY;

-- Clients Table
CREATE TABLE IF NOT EXISTS public.clients (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users ON DELETE CASCADE NOT NULL,
  name TEXT NOT NULL,
  contact TEXT,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Motorcycles Table
CREATE TABLE IF NOT EXISTS public.motorcycles (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users ON DELETE CASCADE NOT NULL,
  client_id BIGINT REFERENCES public.clients(id) ON DELETE CASCADE NOT NULL,
  make TEXT,
  model TEXT,
  plate TEXT,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Inventory Items Table
CREATE TABLE IF NOT EXISTS public.inventory_items (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users ON DELETE CASCADE NOT NULL,
  name TEXT NOT NULL,
  quantity INTEGER NOT NULL DEFAULT 0,
  price_bought NUMERIC,
  price_sold NUMERIC,
  unit_type TEXT DEFAULT 'unidad',
  restock_quantity INTEGER DEFAULT 0,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Expenses Table
CREATE TABLE IF NOT EXISTS public.expenses (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users ON DELETE CASCADE NOT NULL,
  description TEXT,
  amount NUMERIC,
  date TIMESTAMP WITH TIME ZONE,
  category TEXT,
  item_id BIGINT REFERENCES public.inventory_items(id) ON DELETE SET NULL,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Services Table
CREATE TABLE IF NOT EXISTS public.services (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users ON DELETE CASCADE NOT NULL,
  client_id BIGINT REFERENCES public.clients(id) ON DELETE CASCADE NOT NULL,
  motorcycle_id BIGINT REFERENCES public.motorcycles(id) ON DELETE CASCADE NOT NULL,
  date TIMESTAMP WITH TIME ZONE,
  labor_cost NUMERIC,
  total_value NUMERIC,
  notes TEXT,
  service_type TEXT,
  kilometers INTEGER,
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL
);

-- Service Products Junction Table (Many-to-Many relationship between services and inventory_items)
CREATE TABLE IF NOT EXISTS public.service_products (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID REFERENCES auth.users ON DELETE CASCADE NOT NULL,
  service_id BIGINT REFERENCES public.services(id) ON DELETE CASCADE NOT NULL,
  inventory_item_id BIGINT REFERENCES public.inventory_items(id) ON DELETE CASCADE NOT NULL,
  quantity INTEGER NOT NULL,
  price NUMERIC NOT NULL, -- Price at the time of service
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
  UNIQUE (service_id, inventory_item_id) -- Ensure unique product per service
);

-- RLS Policies

-- Policies for Clients
CREATE POLICY clients_policy_user_id ON public.clients
AS PERMISSIVE FOR ALL
TO public
USING (user_id = auth.uid());

-- Policies for Motorcycles
CREATE POLICY motorcycles_policy_user_id ON public.motorcycles
AS PERMISSIVE FOR ALL
TO public
USING (user_id = auth.uid());

-- Policies for Inventory Items
CREATE POLICY inventory_items_policy_user_id ON public.inventory_items
AS PERMISSIVE FOR ALL
TO public
USING (user_id = auth.uid());

-- Policies for Expenses
CREATE POLICY expenses_policy_user_id ON public.expenses
AS PERMISSIVE FOR ALL
TO public
USING (user_id = auth.uid());

-- Policies for Services
CREATE POLICY services_policy_user_id ON public.services
AS PERMISSIVE FOR ALL
TO public
USING (user_id = auth.uid());

-- Policies for Service Products
CREATE POLICY service_products_policy_user_id ON public.service_products
AS PERMISSIVE FOR ALL
TO public
USING (user_id = auth.uid());
